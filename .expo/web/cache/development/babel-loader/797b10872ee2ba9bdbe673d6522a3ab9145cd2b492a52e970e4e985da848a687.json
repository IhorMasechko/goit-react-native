{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useCallback } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { useFonts } from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar initialState = {\n  userName: \"\",\n  email: \"\",\n  password: \"\"\n};\nSplashScreen.preventAutoHideAsync();\nvar RegistrationScreen = function RegistrationScreen() {\n  console.log(Platform.OS);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isShowKeyboard = _useState2[0],\n    setIsShowKeyboard = _useState2[1];\n  var _useState3 = useState(initialState),\n    _useState4 = _slicedToArray(_useState3, 2),\n    state = _useState4[0],\n    setState = _useState4[1];\n  var _useState5 = useState({\n      userName: false,\n      email: false,\n      password: false\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isFocusInput = _useState6[0],\n    setIsFocusInput = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isShowPassword = _useState8[0],\n    setIsShowPassword = _useState8[1];\n  var _useFonts = useFonts({\n      RobotoRegular: require(\"../assets/fonts/Roboto-Regular.ttf\"),\n      RobotoMedium: require(\"../assets/fonts/Roboto-Medium.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var handleSubmit = function handleSubmit() {\n    setIsShowKeyboard(false);\n    Keyboard.dismiss();\n    setState(initialState);\n  };\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (fontsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [fontsLoaded]);\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: handleSubmit,\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsx(ImageBackground, {\n        source: require(\"../assets/image/photo-BG-2x.jpg\"),\n        style: styles.image,\n        children: _jsx(KeyboardAvoidingView, {\n          behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n          children: _jsxs(View, {\n            style: _objectSpread(_objectSpread({}, styles.formWrapper), Platform.select({\n              ios: {\n                marginTop: isShowKeyboard ? 200 : 219\n              },\n              android: {\n                marginTop: isShowKeyboard ? -100 : 0\n              }\n            })),\n            children: [_jsx(View, {\n              style: styles.imgBox,\n              children: _jsx(Image, {\n                style: styles.icon,\n                source: require(\"../assets/image/add.png\")\n              })\n            }), _jsx(Text, {\n              style: styles.title,\n              children: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F\"\n            }), _jsxs(View, {\n              style: _objectSpread(_objectSpread({}, styles.form), {}, {\n                paddingBottom: isShowKeyboard ? 32 : 45\n              }),\n              children: [_jsx(View, {\n                style: styles.inputuserName,\n                children: _jsx(TextInput, {\n                  style: _objectSpread(_objectSpread({}, styles.input), {}, {\n                    borderColor: isFocusInput.userName ? \"#FF6C00\" : \"#F6F6F6\",\n                    backgroundColor: isFocusInput.userName ? \"#FFFFFF\" : \"#F6F6F6\"\n                  }),\n                  textAlign: \"left\",\n                  placeholderTextColor: \"#BDBDBD\",\n                  textContentType: \"userName\",\n                  value: state.userName,\n                  placeholder: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n                  onFocus: function onFocus() {\n                    setIsShowKeyboard(true), setIsFocusInput(_objectSpread(_objectSpread({}, isFocusInput), {}, {\n                      userName: true\n                    }));\n                  },\n                  onBlur: function onBlur() {\n                    setIsFocusInput(_objectSpread(_objectSpread({}, isFocusInput), {}, {\n                      userName: false\n                    }));\n                  },\n                  onChangeText: function onChangeText(value) {\n                    return setState(function (prevState) {\n                      return _objectSpread(_objectSpread({}, prevState), {}, {\n                        userName: value\n                      });\n                    });\n                  }\n                })\n              }), _jsx(View, {\n                style: styles.inputMail,\n                children: _jsx(TextInput, {\n                  style: _objectSpread(_objectSpread({}, styles.input), {}, {\n                    borderColor: isFocusInput.email ? \"#FF6C00\" : \"#F6F6F6\",\n                    backgroundColor: isFocusInput.email ? \"#FFFFFF\" : \"#F6F6F6\"\n                  }),\n                  textAlign: \"left\",\n                  placeholderTextColor: \"#BDBDBD\",\n                  keyboardType: \"email-address\",\n                  textContentType: \"email\",\n                  value: state.email,\n                  placeholder: \"\\u0410\\u0434\\u0440\\u0435\\u0441 \\u044D\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u043E\\u0439 \\u043F\\u043E\\u0447\\u0442\\u044B\",\n                  onFocus: function onFocus() {\n                    setIsShowKeyboard(true), setIsFocusInput(_objectSpread(_objectSpread({}, isFocusInput), {}, {\n                      email: true\n                    }));\n                  },\n                  onBlur: function onBlur() {\n                    setIsFocusInput(_objectSpread(_objectSpread({}, isFocusInput), {}, {\n                      email: false\n                    }));\n                  },\n                  onChangeText: function onChangeText(value) {\n                    return setState(function (prevState) {\n                      return _objectSpread(_objectSpread({}, prevState), {}, {\n                        email: value\n                      });\n                    });\n                  }\n                })\n              }), _jsxs(View, {\n                style: styles.inputPassword,\n                children: [_jsx(TextInput, {\n                  style: _objectSpread(_objectSpread({}, styles.input), {}, {\n                    borderColor: isFocusInput.password ? \"#FF6C00\" : \"#F6F6F6\",\n                    backgroundColor: isFocusInput.password ? \"#FFFFFF\" : \"#F6F6F6\"\n                  }),\n                  textAlign: \"left\",\n                  placeholderTextColor: \"#BDBDBD\",\n                  textContentType: \"password\",\n                  value: state.password,\n                  secureTextEntry: isShowPassword,\n                  placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n                  onFocus: function onFocus() {\n                    setIsShowKeyboard(true), setIsFocusInput(_objectSpread(_objectSpread({}, isFocusInput), {}, {\n                      password: true\n                    }));\n                  },\n                  onBlur: function onBlur() {\n                    setIsFocusInput(_objectSpread(_objectSpread({}, isFocusInput), {}, {\n                      password: false\n                    }));\n                  },\n                  onChangeText: function onChangeText(value) {\n                    return setState(function (prevState) {\n                      return _objectSpread(_objectSpread({}, prevState), {}, {\n                        password: value\n                      });\n                    });\n                  }\n                }), _jsx(Text, {\n                  style: styles.showPass,\n                  onPress: function onPress() {\n                    setIsShowPassword(function (prevState) {\n                      return !prevState;\n                    });\n                  },\n                  children: isShowPassword ? \"Показать\" : \"Скрыть\"\n                })]\n              }), _jsx(TouchableOpacity, {\n                style: styles.button,\n                activeOpacity: 0.8,\n                onPress: handleSubmit,\n                children: _jsx(Text, {\n                  style: styles.buttonText,\n                  children: \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\"\n                })\n              }), _jsx(TouchableOpacity, {\n                children: _jsx(Text, {\n                  style: styles.aside,\n                  children: \"\\u0423\\u0436\\u0435 \\u0435\\u0441\\u0442\\u044C \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442? \\u0412\\u043E\\u0439\\u0442\\u0438\"\n                })\n              })]\n            })]\n          })\n        })\n      })\n    })\n  });\n};\nexport default RegistrationScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  image: {\n    flex: 1,\n    resizeMode: \"cover\",\n    justifyContent: \"flex-end\"\n  },\n  formWrapper: {\n    paddingTop: 92,\n    paddingLeft: 16,\n    paddingRight: 16,\n    backgroundColor: \"#FFFFFF\",\n    borderTopRightRadius: 25,\n    borderTopLeftRadius: 25,\n    justifyContent: \"center\"\n  },\n  imgBox: {\n    position: \"absolute\",\n    left: \"35%\",\n    top: \"-15%\",\n    width: 120,\n    height: 120,\n    backgroundColor: \"#F6F6F6\",\n    borderRadius: 16\n  },\n  avatar: {\n    width: \"100%\",\n    height: \"100%\"\n  },\n  icon: {\n    position: \"absolute\",\n    left: \"90%\",\n    top: \"65%\",\n    width: 25,\n    height: 25\n  },\n  title: {\n    fontFamily: \"RobotoMedium\",\n    fontStyle: \"normal\",\n    fontSize: 30,\n    lineHeight: 35,\n    letterSpacing: 0.16,\n    color: \"#212121\",\n    textAlign: \"center\"\n  },\n  input: {\n    fontFamily: \"RobotoRegular\",\n    fontStyle: \"normal\",\n    fontSize: 16,\n    lineHeight: 19,\n    color: \"#212121\",\n    paddingLeft: 16,\n    borderWidth: 1,\n    height: 50,\n    borderRadius: 8\n  },\n  inputuserName: {\n    marginTop: 32\n  },\n  inputMail: {\n    marginTop: 16\n  },\n  inputPassword: {\n    marginTop: 16\n  },\n  showPass: {\n    fontFamily: \"RobotoRegular\",\n    fontStyle: \"normal\",\n    lineHeight: 19,\n    fontSize: 16,\n    position: \"absolute\",\n    top: 16,\n    left: 260,\n    color: \"#1B4371\"\n  },\n  button: {\n    marginTop: 43,\n    backgroundColor: \"#FF6C00\",\n    height: 61,\n    borderRadius: 100,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  buttonText: {\n    fontFamily: \"RobotoRegular\",\n    fontStyle: \"normal\",\n    lineHeight: 19,\n    color: \"#FFFFFF\"\n  },\n  aside: {\n    fontFamily: \"RobotoRegular\",\n    fontStyle: \"normal\",\n    lineHeight: 19,\n    marginTop: 16,\n    textAlign: \"center\",\n    color: \"#1B4371\"\n  }\n});","map":{"version":3,"names":["React","useState","useCallback","StyleSheet","TextInput","View","ImageBackground","Text","TouchableOpacity","Platform","KeyboardAvoidingView","Image","TouchableWithoutFeedback","Keyboard","useFonts","SplashScreen","jsx","_jsx","jsxs","_jsxs","initialState","userName","email","password","preventAutoHideAsync","RegistrationScreen","console","log","OS","_useState","_useState2","_slicedToArray","isShowKeyboard","setIsShowKeyboard","_useState3","_useState4","state","setState","_useState5","_useState6","isFocusInput","setIsFocusInput","_useState7","_useState8","isShowPassword","setIsShowPassword","_useFonts","RobotoRegular","require","RobotoMedium","_useFonts2","fontsLoaded","handleSubmit","dismiss","onLayoutRootView","_asyncToGenerator","hideAsync","onPress","children","style","styles","container","source","image","behavior","_objectSpread","formWrapper","select","ios","marginTop","android","imgBox","icon","title","form","paddingBottom","inputuserName","input","borderColor","backgroundColor","textAlign","placeholderTextColor","textContentType","value","placeholder","onFocus","onBlur","onChangeText","prevState","inputMail","keyboardType","inputPassword","secureTextEntry","showPass","button","activeOpacity","buttonText","aside","create","flex","resizeMode","justifyContent","paddingTop","paddingLeft","paddingRight","borderTopRightRadius","borderTopLeftRadius","position","left","top","width","height","borderRadius","avatar","fontFamily","fontStyle","fontSize","lineHeight","letterSpacing","color","borderWidth","alignItems"],"sources":["/Users/ihor.masechko/Documents/goit-react-native/Screens/RegistrationScreen.jsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport {\n  StyleSheet,\n  TextInput,\n  View,\n  ImageBackground,\n  Text,\n  TouchableOpacity,\n  Platform,\n  KeyboardAvoidingView,\n  Image,\n  TouchableWithoutFeedback,\n  Keyboard,\n} from \"react-native\";\n\nimport { useFonts } from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\n\nconst initialState = {\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n};\n\nSplashScreen.preventAutoHideAsync();\n\nconst RegistrationScreen = () => {\n  console.log(Platform.OS);\n\n  const [isShowKeyboard, setIsShowKeyboard] = useState(false);\n  const [state, setState] = useState(initialState);\n  const [isFocusInput, setIsFocusInput] = useState({\n    userName: false,\n    email: false,\n    password: false,\n  });\n\n  const [isShowPassword, setIsShowPassword] = useState(true);\n  const [fontsLoaded] = useFonts({\n    RobotoRegular: require(\"../assets/fonts/Roboto-Regular.ttf\"),\n    RobotoMedium: require(\"../assets/fonts/Roboto-Medium.ttf\"),\n  });\n\n  const handleSubmit = () => {\n    setIsShowKeyboard(false);\n    Keyboard.dismiss();\n    setState(initialState);\n  };\n\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded) {\n      await SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded]);\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  return (\n    <TouchableWithoutFeedback onPress={handleSubmit}>\n      <View style={styles.container}>\n        <ImageBackground\n          source={require(\"../assets/image/photo-BG-2x.jpg\")}\n          style={styles.image}\n        >\n          <KeyboardAvoidingView\n            behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n          >\n            <View\n              style={{\n                ...styles.formWrapper,\n\n                ...Platform.select({\n                  ios: {\n                    marginTop: isShowKeyboard ? 200 : 219,\n                  },\n                  android: {\n                    marginTop: isShowKeyboard ? -100 : 0,\n                  },\n                }),\n              }}\n            >\n              <View style={styles.imgBox}>\n                <Image\n                  style={styles.icon}\n                  source={require(\"../assets/image/add.png\")}\n                />\n              </View>\n              <Text style={styles.title}>Регистрация</Text>\n\n              <View\n                style={{\n                  ...styles.form,\n                  paddingBottom: isShowKeyboard ? 32 : 45,\n                }}\n              >\n                <View style={styles.inputuserName}>\n                  <TextInput\n                    style={{\n                      ...styles.input,\n                      borderColor: isFocusInput.userName\n                        ? \"#FF6C00\"\n                        : \"#F6F6F6\",\n                      backgroundColor: isFocusInput.userName\n                        ? \"#FFFFFF\"\n                        : \"#F6F6F6\",\n                    }}\n                    textAlign={\"left\"}\n                    placeholderTextColor={\"#BDBDBD\"}\n                    textContentType=\"userName\"\n                    value={state.userName}\n                    placeholder=\"Логин\"\n                    onFocus={() => {\n                      setIsShowKeyboard(true),\n                        setIsFocusInput({\n                          ...isFocusInput,\n                          userName: true,\n                        });\n                    }}\n                    onBlur={() => {\n                      setIsFocusInput({\n                        ...isFocusInput,\n                        userName: false,\n                      });\n                    }}\n                    onChangeText={(value) =>\n                      setState((prevState) => ({\n                        ...prevState,\n                        userName: value,\n                      }))\n                    }\n                  />\n                </View>\n                <View style={styles.inputMail}>\n                  <TextInput\n                    style={{\n                      ...styles.input,\n                      borderColor: isFocusInput.email ? \"#FF6C00\" : \"#F6F6F6\",\n                      backgroundColor: isFocusInput.email\n                        ? \"#FFFFFF\"\n                        : \"#F6F6F6\",\n                    }}\n                    textAlign={\"left\"}\n                    placeholderTextColor={\"#BDBDBD\"}\n                    keyboardType=\"email-address\"\n                    textContentType=\"email\"\n                    value={state.email}\n                    placeholder=\"Адрес электронной почты\"\n                    onFocus={() => {\n                      setIsShowKeyboard(true),\n                        setIsFocusInput({\n                          ...isFocusInput,\n                          email: true,\n                        });\n                    }}\n                    onBlur={() => {\n                      setIsFocusInput({\n                        ...isFocusInput,\n                        email: false,\n                      });\n                    }}\n                    onChangeText={(value) =>\n                      setState((prevState) => ({\n                        ...prevState,\n                        email: value,\n                      }))\n                    }\n                  />\n                </View>\n\n                <View style={styles.inputPassword}>\n                  <TextInput\n                    style={{\n                      ...styles.input,\n                      borderColor: isFocusInput.password\n                        ? \"#FF6C00\"\n                        : \"#F6F6F6\",\n                      backgroundColor: isFocusInput.password\n                        ? \"#FFFFFF\"\n                        : \"#F6F6F6\",\n                    }}\n                    textAlign={\"left\"}\n                    placeholderTextColor={\"#BDBDBD\"}\n                    textContentType=\"password\"\n                    value={state.password}\n                    secureTextEntry={isShowPassword}\n                    placeholder=\"Пароль\"\n                    onFocus={() => {\n                      setIsShowKeyboard(true),\n                        setIsFocusInput({\n                          ...isFocusInput,\n                          password: true,\n                        });\n                    }}\n                    onBlur={() => {\n                      setIsFocusInput({\n                        ...isFocusInput,\n                        password: false,\n                      });\n                    }}\n                    onChangeText={(value) =>\n                      setState((prevState) => ({\n                        ...prevState,\n                        password: value,\n                      }))\n                    }\n                  />\n                  <Text\n                    style={styles.showPass}\n                    onPress={() => {\n                      setIsShowPassword((prevState) => !prevState);\n                    }}\n                  >\n                    {isShowPassword ? \"Показать\" : \"Скрыть\"}\n                  </Text>\n                </View>\n                <TouchableOpacity\n                  style={styles.button}\n                  activeOpacity={0.8}\n                  onPress={handleSubmit}\n                >\n                  <Text style={styles.buttonText}>Зарегистрироваться</Text>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                  <Text style={styles.aside}>Уже есть аккаунт? Войти</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </KeyboardAvoidingView>\n        </ImageBackground>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\nexport default RegistrationScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  image: {\n    flex: 1,\n    resizeMode: \"cover\",\n    justifyContent: \"flex-end\",\n  },\n  formWrapper: {\n    paddingTop: 92,\n    paddingLeft: 16,\n    paddingRight: 16,\n    backgroundColor: \"#FFFFFF\",\n    borderTopRightRadius: 25,\n    borderTopLeftRadius: 25,\n    justifyContent: \"center\",\n  },\n  imgBox: {\n    position: \"absolute\",\n    left: \"35%\",\n    top: \"-15%\",\n    width: 120,\n    height: 120,\n    backgroundColor: \"#F6F6F6\",\n    borderRadius: 16,\n  },\n  avatar: {\n    // width: 120,\n    // height: 120,\n    width: \"100%\",\n    height: \"100%\",\n  },\n  icon: {\n    position: \"absolute\",\n    left: \"90%\",\n    top: \"65%\",\n    width: 25,\n    height: 25,\n  },\n  title: {\n    fontFamily: \"RobotoMedium\",\n    fontStyle: \"normal\",\n    fontSize: 30,\n    lineHeight: 35,\n    letterSpacing: 0.16,\n    color: \"#212121\",\n    textAlign: \"center\",\n  },\n  input: {\n    fontFamily: \"RobotoRegular\",\n    fontStyle: \"normal\",\n    fontSize: 16,\n    lineHeight: 19,\n    color: \"#212121\",\n    paddingLeft: 16,\n    borderWidth: 1,\n    height: 50,\n    borderRadius: 8,\n  },\n  inputuserName: {\n    marginTop: 32,\n  },\n  inputMail: {\n    marginTop: 16,\n  },\n  inputPassword: {\n    marginTop: 16,\n  },\n  showPass: {\n    fontFamily: \"RobotoRegular\",\n    fontStyle: \"normal\",\n    lineHeight: 19,\n    fontSize: 16,\n    position: \"absolute\",\n    top: 16,\n    left: 260,\n    color: \"#1B4371\",\n  },\n  button: {\n    marginTop: 43,\n    backgroundColor: \"#FF6C00\",\n    height: 61,\n    borderRadius: 100,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  buttonText: {\n    fontFamily: \"RobotoRegular\",\n    fontStyle: \"normal\",\n    lineHeight: 19,\n    color: \"#FFFFFF\",\n  },\n  aside: {\n    fontFamily: \"RobotoRegular\",\n    fontStyle: \"normal\",\n    lineHeight: 19,\n    marginTop: 16,\n    textAlign: \"center\",\n    color: \"#1B4371\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}